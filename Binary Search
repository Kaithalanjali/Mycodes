//Time complexity = log n 

// basically two concept are used - one is finding pivot and doing operation on it 


int pivotIndex(vector<int>& nums) {
        int n=nums.size();
        vector<int> P(n);
        for(int i=0;i<n-1;i++){
            P[0]=nums[0];
            P[i+1]=nums[i+1]+P[i];
        }
        for(int i=0;i<n;i++){
            if((P[n-1]-P[i])==(P[i]-nums[i]))
             return i;
        }
            return -1;
    } 



//                               - another one is similar to aggressive cows


bool isPossible(vector<int> &stalls, int minDist, int k)
{
    int cows=1;               // we already place it at the first available slot i.e stalls[0]  ( GREEDY )
    int lastCowPosition=stalls[0];
    for(int i=1;i<stalls.size();i++)
    {
        if(stalls[i]-lastCowPosition>=minDist)
        {
            cows++;
            lastCowPosition=stalls[i];
            if(cows>=k) return true;
        }
    }
    return false;
}

int aggressiveCows(vector<int> &stalls, int k)
{
    int n=stalls.size();
    sort(stalls.begin(),stalls.end());
    int low=1,high=stalls[n-1]-stalls[0];              // just take low=0 and high = 1000000 any large number if this seems tricky
    int res;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(isPossible(stalls,mid,k))
        {
            res=mid;
            low=mid+1;
        }
        else high=mid-1;
    }
    return res;
}
