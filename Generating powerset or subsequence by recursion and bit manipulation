//By bit
//Time complexity O(2^n) valid for only n<20
vector<string> subsequences(string str){

   vector<string>ans;
   int n=str.size();
   //for given string 2^n combination of binary table is required to calculate all possible out comes
   for(int i=1;i<(1<<n);i++){
       string output="";
       for(int j=0;j<n;j++){//here we are checking ecah bit is set ot unset
           if(i&(1<<j)){
               output.push_back(str[j]);
           }
       }
       ans.push_back(output);
   }
return ans;
}

//By recursion
// Time complexity O(2^n) 
void solve(vector<string>& ans, string str, string output, int i) {
   //base case
   if(i>=str.length()) {
       if(output.length()>0)
       ans.push_back(output);
       return ;
       }
   
   //exclude
   solve(ans, str, output, i+1);
   //include
   output.push_back(str[i]);
   solve(ans, str, output, i+1);
}
